services:
  api:
    build:
      context: projects/api
      dockerfile: Dockerfile
    env_file:
      - docker.env
    ports:
      - "8000:8000"
    command: python run.py
  postgres:
    image: postgres:14.7-alpine
    restart: on-failure
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    depends_on:
      - pgadmin

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@me.me
      PGADMIN_DEFAULT_PASSWORD: postgres
      GUNICORN_ACCESS_LOGFILE: /dev/null
    ports:
      - 5050:80
    volumes:
      - ./.docker/pgadmin/servers.json:/pgadmin4/servers.json
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: access_key
      MINIO_ROOT_PASSWORD: secret_key
      MINIO_ADDRESS: :9000
      MINIO_CONSOLE_ADDRESS: :9001
    entrypoint: minio server /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-create-buckets:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/bash -c "
      /usr/bin/mc alias set myminio http://minio:9000 access_key secret_key;
      /usr/bin/mc mb myminio/public;
      exit 0;
      "
